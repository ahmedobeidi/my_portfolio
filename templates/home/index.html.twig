{% extends 'base.html.twig' %}

{% block title %}Junior Web Developer | Ahmed AL-OBEIDI{% endblock %}

{% block stylesheets %}
    <link rel="stylesheet" href="{{ asset('styles/css/custom.css') }}">
{% endblock %}

{% block body %}
    <!-- Navigation Header -->
    <header class="fixed top-0 left-0 w-full z-50 bg-white/90 backdrop-blur-sm shadow-sm">
        <nav class="h-16 px-6 flex items-center justify-between lg:justify-start">
            <!-- Logo/Brand -->
            <a href="#home" class="flex items-center hover:opacity-80 transition-opacity">
                <img src="{{ asset('styles/images/logo.png') }}" alt="Ahmed AL-OBEIDI Logo" class="w-12 h-12 rounded-full border-4 border-amber-600 mr-4">
                <div class="font-raleway font-bold text-xl">
                    Ahmed AL-OBEIDI
                </div>
            </a>
            
            <!-- Desktop Navigation (left side, hidden on mobile) -->
            <ul class="hidden lg:flex ml-12 space-x-8">
                <li><a href="#home" class="nav-link text-gray-700 hover:text-amber-600 transition-colors">Accueil</a></li>
                <li><a href="#about" class="nav-link text-gray-700 hover:text-amber-600 transition-colors">À propos</a></li>
                <li><a href="#portfolio" class="nav-link text-gray-700 hover:text-amber-600 transition-colors">Portfolio</a></li>
                <li><a href="#services" class="nav-link text-gray-700 hover:text-amber-600 transition-colors">Services</a></li>
                <li><a href="#contact" class="nav-link text-gray-700 hover:text-amber-600 transition-colors">Contact</a></li>
            </ul>
            
            <!-- Mobile Menu Button (right side) -->
            <button id="mobile-menu-btn" class="lg:hidden ml-auto p-2 text-gray-700 hover:text-amber-600 focus:outline-none">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
                </svg>
            </button>
        </nav>
        
        <!-- Mobile Navigation Menu -->
        <div id="mobile-menu" class="lg:hidden hidden bg-white border-t">
            <ul class="py-4">
                <li><a href="#home" class="block px-6 py-3 text-gray-700 hover:text-amber-600 hover:bg-gray-50 transition-colors">Accueil</a></li>
                <li><a href="#about" class="block px-6 py-3 text-gray-700 hover:text-amber-600 hover:bg-gray-50 transition-colors">À propos</a></li>
                <li><a href="#portfolio" class="block px-6 py-3 text-gray-700 hover:text-amber-600 hover:bg-gray-50 transition-colors">Portfolio</a></li>
                <li><a href="#services" class="block px-6 py-3 text-gray-700 hover:text-amber-600 hover:bg-gray-50 transition-colors">Services</a></li>
                <li><a href="#contact" class="block px-6 py-3 text-gray-700 hover:text-amber-600 hover:bg-gray-50 transition-colors">Contact</a></li>
            </ul>
        </div>
    </header>

    <!-- Main Content -->
    <main>
        <!-- Home Section -->
        <section id="home" class="h-screen w-full flex items-center justify-center bg-gray-900">
            <div class="text-center px-6">
                <h1 class="font-raleway text-5xl lg:text-7xl font-bold text-white mb-6">
                    Ahmed AL-OBEIDI
                </h1>
                <p class="text-xl lg:text-2xl text-gray-600 mb-8">
                    Développeur Web Junior
                </p>
                <a href="#about" class="inline-block bg-amber-600 text-white px-8 py-3 rounded-lg hover:bg-amber-700 transition-colors">
                    En savoir plus
                </a>
            </div>
        </section>

        <!-- About Section -->
        <section id="about" class="h-screen w-full flex items-center justify-center bg-white">
            <div class="max-w-4xl mx-auto px-6 text-center">
                <h2 class="font-raleway text-4xl lg:text-5xl font-bold text-gray-900 mb-8">
                    À propos de moi
                </h2>
                <p class="text-lg lg:text-xl text-gray-600 leading-relaxed mb-8">
                    Je suis un développeur web junior passionné avec une expertise dans les technologies web modernes. 
                    J'aime créer des sites web beaux et fonctionnels qui offrent d'excellentes expériences utilisateur.
                </p>
                <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
                    <div class="p-6 border rounded-lg">
                        <h3 class="font-raleway text-xl font-bold mb-4">Frontend</h3>
                        <p class="text-gray-600">HTML, CSS, JavaScript, Twig</p>
                    </div>
                    <div class="p-6 border rounded-lg">
                        <h3 class="font-raleway text-xl font-bold mb-4">Backend</h3>
                        <p class="text-gray-600">PHP, Symfony</p>
                    </div>
                    <div class="p-6 border rounded-lg">
                        <h3 class="font-raleway text-xl font-bold mb-4">Outils</h3>
                        <p class="text-gray-600">Git, Tailwind CSS</p>
                    </div>
                </div>
            </div>
        </section>

        <!-- Portfolio Section -->
        <section id="portfolio" class="h-screen w-full flex items-center justify-center bg-gray-50">
            <div class="max-w-6xl mx-auto px-6">
                <h2 class="font-raleway text-4xl lg:text-5xl font-bold text-gray-900 mb-12 text-center">
                    Mon Portfolio
                </h2>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                    <div class="bg-white p-6 rounded-lg shadow-lg">
                        <div class="h-48 bg-amber-600 rounded-lg mb-4"></div>
                        <h3 class="font-raleway text-xl font-bold mb-2">Projet 1</h3>
                        <p class="text-gray-600">Description de votre premier projet</p>
                    </div>
                    <div class="bg-white p-6 rounded-lg shadow-lg">
                        <div class="h-48 bg-amber-600 rounded-lg mb-4"></div>
                        <h3 class="font-raleway text-xl font-bold mb-2">Projet 2</h3>
                        <p class="text-gray-600">Description de votre deuxième projet</p>
                    </div>
                    <div class="bg-white p-6 rounded-lg shadow-lg">
                        <div class="h-48 bg-amber-600 rounded-lg mb-4"></div>
                        <h3 class="font-raleway text-xl font-bold mb-2">Projet 3</h3>
                        <p class="text-gray-600">Description de votre troisième projet</p>
                    </div>
                </div>
            </div>
        </section>

        <!-- Services Section -->
        <section id="services" class="h-screen w-full flex items-center justify-center bg-white">
            <div class="max-w-4xl mx-auto px-6 text-center">
                <h2 class="font-raleway text-4xl lg:text-5xl font-bold text-gray-900 mb-12">
                    Services
                </h2>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                    <div class="p-8 border rounded-lg hover:shadow-lg transition-shadow">
                        <h3 class="font-raleway text-2xl font-bold mb-4">Développement Web</h3>
                        <p class="text-gray-600">Sites web personnalisés construits avec des technologies modernes</p>
                    </div>
                    <div class="p-8 border rounded-lg hover:shadow-lg transition-shadow">
                        <h3 class="font-raleway text-2xl font-bold mb-4">Design Responsive</h3>
                        <p class="text-gray-600">Designs mobile-first qui fonctionnent sur tous les appareils</p>
                    </div>
                </div>
            </div>
        </section>

        <!-- Contact Section -->
        <section id="contact" class="h-screen w-full flex items-center justify-center bg-gray-900 text-white">
            <div class="max-w-4xl mx-auto px-6 text-center">
                <h2 class="font-raleway text-4xl lg:text-5xl font-bold mb-8">
                    Entrons en contact
                </h2>
                <p class="text-xl text-gray-300 mb-8">
                    Travaillons ensemble sur votre prochain projet
                </p>
                
                <!-- Social Links -->
                <div class="flex justify-center space-x-6 mb-8">
                    <a href="https://linkedin.com/in/your-profile" target="_blank" class="text-gray-300 hover:text-amber-600 transition-colors">
                        <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
                        </svg>
                    </a>
                    <a href="https://github.com/your-username" target="_blank" class="text-gray-300 hover:text-amber-600 transition-colors">
                        <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
                        </svg>
                    </a>
                </div>
                
                <a href="mailto:ahmed@example.com" class="inline-block bg-amber-600 text-white px-8 py-3 rounded-lg hover:bg-amber-700 transition-colors">
                    Me contacter
                </a>
            </div>
        </section>
    </main>

    <script>
        // Mobile menu toggle
        const mobileMenuBtn = document.getElementById('mobile-menu-btn');
        const mobileMenu = document.getElementById('mobile-menu');
        
        if (mobileMenuBtn && mobileMenu) {
            mobileMenuBtn.addEventListener('click', () => {
                mobileMenu.classList.toggle('hidden');
            });
            
            // Close mobile menu when clicking on a link
            const mobileLinks = mobileMenu.querySelectorAll('a');
            mobileLinks.forEach(link => {
                link.addEventListener('click', () => {
                    mobileMenu.classList.add('hidden');
                });
            });
        }

        // Get all sections and navigation links
        const sections = document.querySelectorAll('section');
        const navLinks = document.querySelectorAll('.nav-link');
        let currentSectionIndex = 0;
        let isScrolling = false;
        let scrollAccumulator = 0;
        let lastScrollTime = 0;
        let lastTouchTime = 0;
        let scrollTimeout = null;
        let dotIndicators = [];

        // Function to scroll to specific section
        function scrollToSection(index) {
            if (index >= 0 && index < sections.length && !isScrolling) {
                isScrolling = true;
                currentSectionIndex = index;
                
                sections[index].scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
                
                // Update navigation and URL
                updateActiveNav();
                updateDots();
                updateURL();
                
                // Reset scrolling flag
                setTimeout(() => {
                    isScrolling = false;
                }, 500);
            }
        }

        // Enhanced wheel event handling with better touchpad detection
        window.addEventListener('wheel', (e) => {
            if (isScrolling) return;
            
            e.preventDefault();
            
            const now = Date.now();
            const timeDiff = now - lastScrollTime;
            const absY = Math.abs(e.deltaY);
            
            // Advanced touchpad detection
            const isTouchpad = (
                absY < 50 ||                          
                (absY < 120 && timeDiff < 80) ||      
                e.deltaMode === 0                     
            );
            
            if (isTouchpad) {
                // Touchpad handling with accumulation
                scrollAccumulator += e.deltaY;
                
                // Clear previous timeout
                if (scrollTimeout) {
                    clearTimeout(scrollTimeout);
                }
                
                // Reset accumulator after short delay
                scrollTimeout = setTimeout(() => {
                    scrollAccumulator = 0;
                }, 120);
                
                // Threshold for touchpad
                const threshold = 250;
                
                if (Math.abs(scrollAccumulator) >= threshold) {
                    if (scrollAccumulator > 0 && currentSectionIndex < sections.length - 1) {
                        scrollToSection(currentSectionIndex + 1);
                        scrollAccumulator = 0;
                    } else if (scrollAccumulator < 0 && currentSectionIndex > 0) {
                        scrollToSection(currentSectionIndex - 1);
                        scrollAccumulator = 0;
                    }
                }
            } else {
                // Mouse wheel handling
                if (timeDiff < 150) return;
                
                if (e.deltaY > 0 && currentSectionIndex < sections.length - 1) {
                    scrollToSection(currentSectionIndex + 1);
                } else if (e.deltaY < 0 && currentSectionIndex > 0) {
                    scrollToSection(currentSectionIndex - 1);
                }
            }
            
            lastScrollTime = now;
        }, { passive: false });

        // Keyboard navigation
        window.addEventListener('keydown', (e) => {
            if (isScrolling) return;
            
            switch(e.key) {
                case 'ArrowDown':
                case 'PageDown':
                case ' ':
                    e.preventDefault();
                    if (currentSectionIndex < sections.length - 1) {
                        scrollToSection(currentSectionIndex + 1);
                    }
                    break;
                    
                case 'ArrowUp':
                case 'PageUp':
                    e.preventDefault();
                    if (currentSectionIndex > 0) {
                        scrollToSection(currentSectionIndex - 1);
                    }
                    break;
                    
                case 'Home':
                    e.preventDefault();
                    scrollToSection(0);
                    break;
                    
                case 'End':
                    e.preventDefault();
                    scrollToSection(sections.length - 1);
                    break;
            }
        });

        // Handle navigation link clicks
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                
                const targetId = this.getAttribute('href').substring(1);
                const targetSection = document.getElementById(targetId);
                
                if (targetSection) {
                    const targetIndex = Array.from(sections).indexOf(targetSection);
                    if (targetIndex !== -1) {
                        scrollToSection(targetIndex);
                    }
                }
            });
        });

        // Update active navigation
        function updateActiveNav() {
            if (navLinks.length === 0) return;
            
            const currentSection = sections[currentSectionIndex];
            if (!currentSection) return;
            
            const currentId = currentSection.getAttribute('id');
            
            navLinks.forEach(link => {
                link.classList.remove('text-amber-600');
                link.classList.add('text-gray-700');
                
                if (link.getAttribute('href') === `#${currentId}`) {
                    link.classList.remove('text-gray-700');
                    link.classList.add('text-amber-600');
                }
            });
        }

        // Update dot indicators
        function updateDots() {
            dotIndicators.forEach((dot, index) => {
                if (index === currentSectionIndex) {
                    dot.style.backgroundColor = '#f59e0b';
                    dot.style.transform = 'scale(1.3)';
                } else {
                    dot.style.backgroundColor = 'rgba(255, 255, 255, 0.4)';
                    dot.style.transform = 'scale(1)';
                }
            });
        }

        // Touch support for mobile devices
        let touchStartY = 0;
        let touchEndY = 0;
        let touchStartTime = 0;

        window.addEventListener('touchstart', (e) => {
            touchStartY = e.changedTouches[0].screenY;
            touchStartTime = Date.now();
        }, { passive: true });

        window.addEventListener('touchend', (e) => {
            if (isScrolling) return;
            
            const now = Date.now();
            const touchDuration = now - touchStartTime;
            
            if (now - lastTouchTime < 250 || touchDuration > 500) return;
            
            touchEndY = e.changedTouches[0].screenY;
            const touchDiff = touchStartY - touchEndY;
            const minSwipeDistance = 50;
            
            if (Math.abs(touchDiff) >= minSwipeDistance) {
                if (touchDiff > 0 && currentSectionIndex < sections.length - 1) {
                    scrollToSection(currentSectionIndex + 1);
                } else if (touchDiff < 0 && currentSectionIndex > 0) {
                    scrollToSection(currentSectionIndex - 1);
                }
                lastTouchTime = now;
            }
        }, { passive: true });

        // Handle browser back/forward buttons
        window.addEventListener('popstate', () => {
            const hash = window.location.hash.substring(1);
            if (hash) {
                const targetSection = document.getElementById(hash);
                if (targetSection) {
                    const targetIndex = Array.from(sections).indexOf(targetSection);
                    if (targetIndex !== -1) {
                        currentSectionIndex = targetIndex;
                        updateActiveNav();
                        updateDots();
                    }
                }
            }
        });

        // Update URL hash when scrolling
        function updateURL() {
            const currentSection = sections[currentSectionIndex];
            if (currentSection) {
                const sectionId = currentSection.getAttribute('id');
                if (sectionId && window.location.hash !== `#${sectionId}`) {
                    history.replaceState(null, null, `#${sectionId}`);
                }
            }
        }

        // Create scroll indicators (dots navigation) at bottom center
        function createScrollIndicators() {
            // Create the container
            const container = document.createElement('div');
            container.id = 'scroll-dots';
            container.style.cssText = `
                position: fixed;
                bottom: 2rem;
                left: 50%;
                transform: translateX(-50%);
                z-index: 9999;
                display: flex;
                gap: 1rem;
                pointer-events: auto;
            `;
            
            // Clear any existing dots
            dotIndicators = [];
            
            // Create dots for each section
            sections.forEach((section, index) => {
                const dot = document.createElement('button');
                dot.style.cssText = `
                    width: 12px;
                    height: 12px;
                    border-radius: 50%;
                    border: none;
                    background: rgba(255, 255, 255, 0.4);
                    cursor: pointer;
                    transition: all 0.3s ease;
                    outline: none;
                `;
                
                // Set initial state
                if (index === currentSectionIndex) {
                    dot.style.backgroundColor = '#f59e0b';
                    dot.style.transform = 'scale(1.3)';
                } else {
                    dot.style.backgroundColor = 'rgba(255, 255, 255, 0.4)';
                }
                
                // Add hover effect
                dot.addEventListener('mouseenter', () => {
                    if (index !== currentSectionIndex) {
                        dot.style.transform = 'scale(1.1)';
                        dot.style.backgroundColor = 'rgba(255, 255, 255, 0.7)';
                    }
                });
                
                dot.addEventListener('mouseleave', () => {
                    if (index !== currentSectionIndex) {
                        dot.style.transform = 'scale(1)';
                        dot.style.backgroundColor = 'rgba(255, 255, 255, 0.4)';
                    }
                });
                
                // Add click event
                dot.addEventListener('click', (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    scrollToSection(index);
                });
                
                // Add title for accessibility
                const sectionId = section.getAttribute('id');
                dot.title = sectionId ? sectionId.charAt(0).toUpperCase() + sectionId.slice(1) : `Section ${index + 1}`;
                
                dotIndicators.push(dot);
                container.appendChild(dot);
            });
            
            // Add to page
            document.body.appendChild(container);
            
            console.log('Scroll indicators created:', dotIndicators.length, 'dots');
        }

        // Initialize on page load
        function initialize() {
            // Set initial section based on URL hash
            const hash = window.location.hash.substring(1);
            if (hash) {
                const targetSection = document.getElementById(hash);
                if (targetSection) {
                    const targetIndex = Array.from(sections).indexOf(targetSection);
                    if (targetIndex !== -1) {
                        currentSectionIndex = targetIndex;
                    }
                }
            }
            
            updateActiveNav();
            updateURL();
            
            // Scroll to current section without animation on load
            if (sections[currentSectionIndex]) {
                sections[currentSectionIndex].scrollIntoView({
                    behavior: 'auto',
                    block: 'start'
                });
            }
            
            // Create dots after a short delay to ensure DOM is ready
            setTimeout(() => {
                createScrollIndicators();
                updateDots();
            }, 500);
        }

        // Prevent default scroll behavior
        document.body.style.overflow = 'hidden';
        document.documentElement.style.overflow = 'hidden';

        // Re-enable overflow for main content
        const mainElement = document.querySelector('main');
        if (mainElement) {
            mainElement.style.overflow = 'visible';
        }

        // Run initialization when DOM is ready
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initialize);
        } else {
            initialize();
        }

        // Handle resize events
        let resizeTimeout;
        window.addEventListener('resize', () => {
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(() => {
                if (sections[currentSectionIndex]) {
                    sections[currentSectionIndex].scrollIntoView({
                        behavior: 'auto',
                        block: 'start'
                    });
                }
                updateActiveNav();
                updateDots();
            }, 100);
        });

        // Debug information
        console.log('Script loaded. Sections found:', sections.length);
        console.log('Navigation links found:', navLinks.length);
    </script>
{% endblock %}